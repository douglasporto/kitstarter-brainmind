import axios from 'axios';
import { isArray } from 'lodash';
import store from '../store';
import router from '../router';

const http = axios.create({
  baseURL: process.env.VUE_APP_ROOT_API
});

/**
 * Helper method to set the header with the token
 */
export function setToken(token) {
  http.defaults.headers.common.Authorization = `Bearer ${token}`;
}

http.interceptors.response.use(
  response => response,
  /**
   * This is a central point to handle all
   * error messages generated by HTTP
   * requests
   */
  error => {
    /**
     * If token is either expired, not provided or invalid
     * then redirect to login. On server side the error
     * messages can be changed on app/Providers/EventServiceProvider.php
     */
    if (error.response.status === 401) {
      router.push({ path: '/login' });
    }
    /**
     * Error messages are sent in arrays
     */
    if (isArray(error.response.data)) {
      console.log(error.response);
      store.dispatch('setMessage', {
        type: 'error',
        message: error.response.data[0].message
      });
      /**
       * Laravel generated validation errors are
       * sent in an object
       */
    } else {
      store.dispatch('setMessage', {
        type: 'validation',
        message: error.response.data
      });
    }
    // store.dispatch('setFetching', { fetching: false });
    return Promise.reject(error);
  }
);

export default function install(Vue) {
  Object.defineProperties(Vue.prototype, {
    $http: {
      get() {
        return http;
      }
    }
  });
}
